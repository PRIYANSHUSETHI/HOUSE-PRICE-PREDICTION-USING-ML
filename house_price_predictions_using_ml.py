# -*- coding: utf-8 -*-
"""HOUSE PRICE PREDICTIONS USING ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ybv18zlp6vah3Z2nHwIiEuOFBJ_QHGX

THIS IS A SUPERVISED BATCH LEARNING PROBLEM WITH THE REGRESSION AS MY TASK

WE TAKE RMSE AS OUR PERFORMANCE MEASURE BECAUSE ITS SENSITIVE TO OUTLIERS AND PENALIZES LARGE ERRORS MORE
"""

# Commented out IPython magic to ensure Python compatibility.
# LET US START BY IMPORTING THE NECESSARY LIBRARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

#READING THE CSV FILE AND CONVERTING IT INTO A DATAFRAME USING PANDAS
housing = pd.read_csv('data.csv')
housing.head()

"""LET US START OF BY EXPLORING THE DATA TO UNDERSTAND IT BETTER"""

# FINDING IF THE DATA HAS ANY MISSING VALUES
housing.info()

housing.describe()

housing.hist(bins=50, figsize=(20,15))

#creating train and test slpit from the data
from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split (housing, test_size = 0.2, random_state = 42)

# we always want that our training and test split represents our entire population, therefore we use stratified sampling to ensure that
from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits = 1, test_size = 0.2, random_state = 42)
for train_index, test_index in split.split(housing, housing['CHAS']): # starified shuffling based on one of the more importrant features
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]

"""LOOKING FOR CORRELATIONS

"""

corr_matrix = housing.corr()

from pandas.plotting import scatter_matrix
attributes = ["MEDV", "RM", "ZN", "LSTAT"]
scatter_matrix(housing[attributes], figsize = (12,8))

"""TRYING OUT ATTRIBUTE COMBINATIONS"""

housing['TAXRM'] = housing['TAX']/housing['RM']

housing = strat_train_set.drop("MEDV", axis=1) #features
housing_labels = strat_train_set["MEDV"].copy() #labels

"""HANDLING MISSING VALUES"""

# TO TAKE CARE OF MISSING POINTS: WE HAVE 3 OPTIONS
# !) GET RID OF THE MISSING VALUES
# 2) GET RID OF THE ATTRIBUTES
# 3) SET THE VCALUE TO SOME VALUE (MEAN, MEDIAN, MODE)

housing.dropna(subset = ['RM']) # option 1

housing.drop('RM', axis = 1) # option 2

median = housing['RM'].median()
housing['RM'].fillna(median) # option 3

"""AUTOMATING THE ABOVE TASKS USING SKLEARN"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy = 'median')
imputer.fit(housing)

X= imputer.transform(housing)
housing_tr = pd.DataFrame(X, columns = housing.columns)

housing_tr.describe()

"""CREATING PIPELINES

"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy = 'median')),
    ('std_scaler', StandardScaler())
])

housing_num_tr = my_pipeline.fit_transform(housing)

"""Selecting a desired model for Boston House Price Prediction"""

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
# model = LinearRegression()
# model = DecisionTreeRegressor()
model = RandomForestRegressor()
model.fit(housing_num_tr, housing_labels)

some_data = housing.iloc[:5]

some_labels = housing_labels.iloc[:5]

prepared_data = my_pipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)

"""EVALUATING THE MODEL"""

from sklearn.metrics import mean_squared_error
import numpy as np
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt(mse)
rmse

"""Using better evaluation technique - Cross Validation"""

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)
rmse_scores

def print_scores(scores):
    print("Scores:", scores)
    print("Mean: ", scores.mean())
    print("Standard deviation: ", scores.std())

print_scores(rmse_scores)

"""SAVING THE MODEL"""

from joblib import dump, load
dump(model, 'Sethi.joblib')

"""TESTING THE MODEL"""

X_test = strat_test_set.drop("MEDV", axis =1)
Y_test = strat_test_set["MEDV"].copy()
X_test_prepared = my_pipeline.transform(X_test)
final_predictions = model.predict(X_test_prepared)
final_mse = mean_squared_error(Y_test, final_predictions)
final_rmse = np.sqrt(final_mse)
mse
rmse

print(final_predictions)

